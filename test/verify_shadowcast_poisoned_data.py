#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""verify_shadowcast_poisoned_data.py

Validate poisoned sequential data generated by the ShadowCast attack.

The script compares the poisoned sequential data with the original file and
ensures that injected fake user lines have the expected numeric format.
"""

import argparse
import os
import sys


def read_lines(path: str):
    with open(path, "r", encoding="utf-8") as f:
        return [line.rstrip("\n") for line in f]



FAKE_INTERACTIONS = 5

def verify_file(orig_path: str, pois_path: str, expected_fake_users: int) -> bool:
    orig = read_lines(orig_path)
    pois = read_lines(pois_path)
    orig_cnt = len(orig)
    pois_cnt = len(pois)
    actual_fake = pois_cnt - orig_cnt

    expected_lines = expected_fake_users

    print(f"[DATASET] Original: {orig_path}, Poisoned: {pois_path}")
    print(f"  Original lines: {orig_cnt}, Poisoned lines: {pois_cnt}")
    print(f"  Added lines: actual {actual_fake}, expected {expected_lines}")

    if actual_fake != expected_lines:
        print("  [ERROR] line count mismatch")
        return False

    added_lines = pois[-expected_lines:] if expected_lines > 0 else []
    for i, line in enumerate(added_lines, start=1):
        parts = line.split()
        if len(parts) != FAKE_INTERACTIONS + 1:
            print(
                f"  [ERROR] line {i} expected {FAKE_INTERACTIONS + 1} fields but got {len(parts)}: '{line}'"
            )
            return False
        if not all(p.isdigit() for p in parts):
            print(f"  [ERROR] line {i} invalid numeric format: '{line}'")
            return False
        

    print("  [OK] format and count look good\n")
    return True


def main():
    parser = argparse.ArgumentParser(description="Verify ShadowCast poisoned sequential data")
    parser.add_argument("--dataset", required=True, help="dataset name")
    parser.add_argument("--data-root", default="data", help="data root directory")
    parser.add_argument("--mr", type=float, required=True, help="malicious ratio")
    parser.add_argument("--attack-name", required=True, help="attack name")
    args = parser.parse_args()

    orig_path = os.path.join(args.data_root, args.dataset, "sequential_data.txt")
    suffix = f"_{args.attack_name}_mr{args.mr}"
    pois_path = os.path.join(args.data_root, args.dataset, "poisoned", f"sequential_data{suffix}.txt")

    if not os.path.isfile(orig_path):
        print(f"[ERROR] original file missing: {orig_path}")
        sys.exit(1)
    if not os.path.isfile(pois_path):
        print(f"[ERROR] poisoned file missing: {pois_path}")
        sys.exit(1)

    expected_fake_users = int(len(read_lines(orig_path)) * args.mr)
    ok = verify_file(orig_path, pois_path, expected_fake_users)
    sys.exit(0 if ok else 1)


if __name__ == "__main__":
    main()

